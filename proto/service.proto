syntax = "proto3";

package ovo;
option go_package = "github.com/ii64/go-grpc-template/gen;gen";

// https://cloud.google.com/endpoints/docs/grpc/transcoding
import "google/protobuf/empty.proto";
import "google/protobuf/timestamp.proto";
import "google/protobuf/duration.proto";
import "google/protobuf/field_mask.proto";
import "google/api/annotations.proto";
import "protoc-gen-openapiv2/options/annotations.proto";
import "github.com/mwitkow/go-proto-validators/validator.proto";

option (grpc.gateway.protoc_gen_openapiv2.options.openapiv2_swagger) = {
    info: {
        title: "GO-GRPC template";
        version: "1.0";
        description: "the description";
        license: {
            name: "Apache";
            url: "https://www.apache.org/licenses/LICENSE-2.0";
        };
    };
    schemes: HTTPS;
};


/*
| Enums
*/
enum MessageType {
    NONE = 0;
    NORMAL = 1;
    EFFECT = 2;
    CONTACT = 3;
    TEXT = 4;
}

/*
| Structs
*/
message EchoRequest {
    MessageType m_type = 1;
    string message = 2;
}
message EchoResponse {
    MessageType m_type = 1;
    string message = 2;
}

/*
| Services
*/
service MyService {
    rpc doEcho(EchoRequest) returns (EchoResponse) {
        option (google.api.http) = {
            post: "/v1.0/my/echo"
            body: "*"
        };
    }
}

