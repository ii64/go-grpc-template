// Code generated by protoc-gen-gohttpclient v1.1.4. DO NOT EDIT.
// source: service.proto

package gen

import (
	bytes "bytes"
	context "context"
	json "encoding/json"
	lib "github.com/ii64/protoc-gen-gohttpclient/lib"
	grpc "google.golang.org/grpc"
	http "net/http"
	url "net/url"
)

// MyServiceHTTPClient is http service client.
type MyServiceHTTPClient struct {
	lib.HTTPClientService
}

// NewMyServiceHTTPClient returns MyServiceHTTPClient
func NewMyServiceHTTPClient(baseURL string, client *http.Client, addt ...lib.HTTPServiceConstructorArg) (s *MyServiceHTTPClient) {
	if client == nil {
		client = http.DefaultClient
	}
	defer func() {
		for _, f := range addt {
			f(&s.HTTPClientService)
		}
	}()
	s = &MyServiceHTTPClient{}
	s.HTTPClientService = lib.HTTPClientService{
		BaseURL:               baseURL,
		Client:                client,
		PbDiscardUnknown:      false,
		HttpResponseValidator: lib.DefaultHTTPResponseValidator,
		ResponseValidator:     lib.DefaultMethodValidator,
	}
	return
}

// DoEcho returns EchoResponse
func (c *MyServiceHTTPClient) DoEcho(ctx context.Context, in *EchoRequest, opts ...grpc.CallOption) (out *EchoResponse, err error) {
	var b []byte
	if b, err = json.Marshal(in); err != nil {
		return
	}
	var req *http.Request
	req, err = http.NewRequest("POST", c.BaseURL+"/v1.0/my/echo", bytes.NewBuffer(b))
	if err != nil {
		return
	}
	req.URL.RawQuery = in.QueryString().Encode()
	req.Header.Set("Content-Type", "application/json")
	req = req.WithContext(ctx)
	var res *http.Response
	if res, err = c.Client.Do(req); err != nil {
		return
	}
	if err = c.HttpResponseValidator(res); err != nil {
		return
	}
	defer res.Body.Close()
	var rs EchoResponse
	if err = c.ResponseHTTPClientHandler(res, &rs); err != nil {
		return
	}
	if f := c.ResponseValidator; f != nil {
		if err = f(&rs); err != nil {
			return
		}
	}
	return &rs, nil
}

// QueryString returns http url.Values of EchoRequest
func (u *EchoRequest) QueryString() url.Values {
	var q = url.Values{}
	q.Set("m_type", u.MType.String())
	q.Set("message", u.Message)
	return q
}

// QueryString returns http url.Values of EchoResponse
func (u *EchoResponse) QueryString() url.Values {
	var q = url.Values{}
	q.Set("m_type", u.MType.String())
	q.Set("message", u.Message)
	return q
}
